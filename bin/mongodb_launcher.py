#!/usr/bin/env python3
"""
MongoDB Launcher Script

This script launches MongoDB with specified configuration or default settings.
It attempts to locate MongoDB in standard installation paths and provides
user-friendly output about the running instance.

Usage:
    python mongodb_launcher.py [--config PATH] [--data-dir PATH] [--port PORT] [--verbose]

Options:
    --config PATH    Path to MongoDB configuration file
    --data-dir PATH  Path to store MongoDB data (default: ./mongo_data)
    --port PORT      Port to run MongoDB on (default: 27017)
    --verbose        Show detailed MongoDB server output
"""

import subprocess
import os
import sys
import time
import argparse
import logging

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    datefmt='%Y-%m-%d %H:%M:%S'
)
logger = logging.getLogger("mongodb_launcher")

# Path to mongod.exe (will try to find it in standard locations)
DEFAULT_MONGOD_PATHS = [
    r"C:\Program Files\MongoDB\Server\6.0\bin\mongod.exe",
    r"C:\Program Files\MongoDB\Server\7.0\bin\mongod.exe",
    r"C:\Program Files\MongoDB\Server\8.0\bin\mongod.exe",
]

# Default config path relative to the workspace root
DEFAULT_CONFIG_PATH = os.path.abspath(os.path.join(os.path.dirname(os.path.dirname(__file__)), "mongod.cfg"))

def parse_arguments():
    """Parse command line arguments."""
    parser = argparse.ArgumentParser(description="MongoDB Launcher - Start MongoDB server with specified configuration")
    parser.add_argument('--config', help='Path to MongoDB configuration file', default=DEFAULT_CONFIG_PATH)
    parser.add_argument('--data-dir', help='Path to MongoDB data directory', 
                        default=os.path.abspath(os.path.join(os.path.dirname(os.path.dirname(__file__)), "mongo_data")))
    parser.add_argument('--port', help='Port to run MongoDB on', type=int, default=27017)
    parser.add_argument('--verbose', help='Show detailed MongoDB server output', action='store_true')
    
    return parser.parse_args()

def find_mongod_executable():
    """
    Attempt to find the mongod executable in standard locations.
    
    Returns:
        str or None: Path to mongod executable if found, None otherwise
    """
    for path in DEFAULT_MONGOD_PATHS:
        if os.path.exists(path):
            logger.info(f"Found MongoDB at: {path}")
            return path
    
    # If none of the default paths work, check if mongod is in PATH
    try:
        subprocess.run(["mongod", "--version"], stdout=subprocess.PIPE, stderr=subprocess.PIPE, check=False)
        logger.info("Found MongoDB in system PATH")
        return "mongod"
    except FileNotFoundError:
        return None

def ensure_directory_exists(directory_path):
    """
    Ensure that the specified directory exists, creating it if necessary.
    
    Args:
        directory_path (str): Path to the directory
        
    Returns:
        str: Path to the directory
    """
    if not os.path.exists(directory_path):
        try:
            logger.info(f"Creating directory: {directory_path}")
            os.makedirs(directory_path)
        except OSError as e:
            logger.error(f"Failed to create directory {directory_path}: {e}")
            raise
    return directory_path

def create_default_config(config_path, data_dir, port):
    """
    Create a default MongoDB configuration file.
    
    Args:
        config_path (str): Path to write the configuration file
        data_dir (str): Data directory to use in the configuration
        port (int): Port number to use in the configuration
    """
    config_content = f"""# MongoDB Configuration File
# Generated by mongodb_launcher.py

storage:
  dbPath: {data_dir}

net:
  bindIp: 127.0.0.1
  port: {port}

systemLog:
  destination: file
  path: {os.path.join(data_dir, 'mongod.log')}
  logAppend: true
"""
    try:
        with open(config_path, "w") as f:
            f.write(config_content)
        logger.info(f"Created default config file at {config_path}")
    except IOError as e:
        logger.error(f"Failed to create config file at {config_path}: {e}")
        raise

def launch_mongodb():
    """
    Main function to launch MongoDB server.
    Handles configuration, startup, and process monitoring.
    """
    # Parse command line arguments
    args = parse_arguments()
    
    # Configure logging level based on verbose flag
    if args.verbose:
        logger.setLevel(logging.DEBUG)
    
    logger.info("Starting MongoDB launcher...")
    
    # Check if data directory exists and create it if needed
    try:
        ensure_directory_exists(args.data_dir)
    except OSError as e:
        logger.error(f"Failed to create data directory: {e}")
        return 1
    
    # Check if config file exists and create it if not
    if not os.path.exists(args.config):
        logger.warning(f"Config file not found at {args.config}")
        try:
            create_default_config(args.config, args.data_dir, args.port)
        except IOError as e:
            logger.error(f"Failed to create config file: {e}")
            return 1
    
    # Find mongod executable
    mongod_path = find_mongod_executable()
    if not mongod_path:
        logger.error("MongoDB executable not found.")
        logger.error("Please install MongoDB Server from: https://www.mongodb.com/try/download/community")
        return 1
    
    logger.info(f"Launching MongoDB with config: {args.config}")
    logger.info(f"Data directory: {args.data_dir}")
    
    try:
        # Launch MongoDB with more verbose output
        process = subprocess.Popen(
            [mongod_path, "--config", args.config],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            text=True,
            bufsize=1  # Line buffered
        )
        
        # Wait a bit to check if process starts successfully
        time.sleep(2)
        
        # Check if process is still running
        if process.poll() is not None:
            # Process exited already, get error message
            _, stderr = process.communicate()
            logger.error(f"MongoDB failed to start. Error details: {stderr}")
            return 1
        
        logger.info("MongoDB is now running! Press Ctrl+C to stop.")
        
        # Collect and display output
        while True:
            output_line = process.stdout.readline()
            if output_line:
                if args.verbose:
                    logger.debug(f"MongoDB: {output_line.strip()}")
            
            # Check if process still running
            if process.poll() is not None:
                break
                
    except KeyboardInterrupt:
        logger.info("Shutting down MongoDB...")
        process.terminate()
        try:
            process.wait(timeout=5)
            logger.info("MongoDB has been stopped.")
        except subprocess.TimeoutExpired:
            logger.warning("MongoDB didn't terminate gracefully, forcing shutdown...")
            process.kill()
            logger.info("MongoDB has been forcefully stopped.")
    except Exception as e:
        logger.error(f"Error occurred: {e}")
        return 1
    
    return 0

if __name__ == "__main__":
    sys.exit(launch_mongodb())
